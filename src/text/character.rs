use std::fmt;
use std::fmt::Write;

#[derive(Debug, PartialEq, Clone, Copy)]
pub enum Character {
    Space,
    Exclamation,
    DoubleQuote,
    Octothorpe,
    Dollar,
    Percent,
    Ampersand,
    SingleQuote,
    OpenParen,
    CloseParen,
    Asterisk,
    Plus,
    Comma,
    Minus,
    Dot,
    Slash,
    D0,
    D1,
    D2,
    D3,
    D4,
    D5,
    D6,
    D7,
    D8,
    D9,
    Colon,
    Semicolon,
    LessThan,
    Equal,
    GreaterThan,
    Question,
    At,
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
    OpenBracket,
    Backslash,
    CloseBracket,
    Caret,
    Underscore,
    Backtick,
    LowerA,
    LowerB,
    LowerC,
    LowerD,
    LowerE,
    LowerF,
    LowerG,
    LowerH,
    LowerI,
    LowerJ,
    LowerK,
    LowerL,
    LowerM,
    LowerN,
    LowerO,
    LowerP,
    LowerQ,
    LowerR,
    LowerS,
    LowerT,
    LowerU,
    LowerV,
    LowerW,
    LowerX,
    LowerY,
    LowerZ,
    OpenBrace,
    Bar,
    CloseBrace,
    Tilde,
}

impl Character {
    pub fn to_byte(&self) -> u8 {
        match self {
            Self::Space => 0x20,
            Self::Exclamation => 0x21,
            Self::DoubleQuote => 0x22,
            Self::Octothorpe => 0x23,
            Self::Dollar => 0x24,
            Self::Percent => 0x25,
            Self::Ampersand => 0x26,
            Self::SingleQuote => 0x27,
            Self::OpenParen => 0x28,
            Self::CloseParen => 0x29,
            Self::Asterisk => 0x2a,
            Self::Plus => 0x2b,
            Self::Comma => 0x2c,
            Self::Minus => 0x2d,
            Self::Dot => 0x2e,
            Self::Slash => 0x2f,
            Self::D0 => 0x30,
            Self::D1 => 0x31,
            Self::D2 => 0x32,
            Self::D3 => 0x33,
            Self::D4 => 0x34,
            Self::D5 => 0x35,
            Self::D6 => 0x36,
            Self::D7 => 0x37,
            Self::D8 => 0x38,
            Self::D9 => 0x39,
            Self::Colon => 0x3a,
            Self::Semicolon => 0x3b,
            Self::LessThan => 0x3c,
            Self::Equal => 0x3d,
            Self::GreaterThan => 0x3e,
            Self::Question => 0x3f,
            Self::At => 0x40,
            Self::A => 0x41,
            Self::B => 0x42,
            Self::C => 0x43,
            Self::D => 0x44,
            Self::E => 0x45,
            Self::F => 0x46,
            Self::G => 0x47,
            Self::H => 0x48,
            Self::I => 0x49,
            Self::J => 0x4a,
            Self::K => 0x4b,
            Self::L => 0x4c,
            Self::M => 0x4d,
            Self::N => 0x4e,
            Self::O => 0x4f,
            Self::P => 0x50,
            Self::Q => 0x51,
            Self::R => 0x52,
            Self::S => 0x53,
            Self::T => 0x54,
            Self::U => 0x55,
            Self::V => 0x56,
            Self::W => 0x57,
            Self::X => 0x58,
            Self::Y => 0x59,
            Self::Z => 0x5a,
            Self::OpenBracket => 0x5b,
            Self::Backslash => 0x5c,
            Self::CloseBracket => 0x5d,
            Self::Caret => 0x5e,
            Self::Underscore => 0x5f,
            Self::Backtick => 0x60,
            Self::LowerA => 0x61,
            Self::LowerB => 0x62,
            Self::LowerC => 0x63,
            Self::LowerD => 0x64,
            Self::LowerE => 0x65,
            Self::LowerF => 0x66,
            Self::LowerG => 0x67,
            Self::LowerH => 0x68,
            Self::LowerI => 0x69,
            Self::LowerJ => 0x6a,
            Self::LowerK => 0x6b,
            Self::LowerL => 0x6c,
            Self::LowerM => 0x6d,
            Self::LowerN => 0x6e,
            Self::LowerO => 0x6f,
            Self::LowerP => 0x70,
            Self::LowerQ => 0x71,
            Self::LowerR => 0x72,
            Self::LowerS => 0x73,
            Self::LowerT => 0x74,
            Self::LowerU => 0x75,
            Self::LowerV => 0x76,
            Self::LowerW => 0x77,
            Self::LowerX => 0x78,
            Self::LowerY => 0x79,
            Self::LowerZ => 0x7a,
            Self::OpenBrace => 0x7b,
            Self::Bar => 0x7c,
            Self::CloseBrace => 0x7d,
            Self::Tilde => 0x7e,
        }
    }

    pub fn from_byte(int: u8) -> Option<Self> {
        Some(match int {
            0x20 => Self::Space,
            0x21 => Self::Exclamation,
            0x22 => Self::DoubleQuote,
            0x23 => Self::Octothorpe,
            0x24 => Self::Dollar,
            0x25 => Self::Percent,
            0x26 => Self::Ampersand,
            0x27 => Self::SingleQuote,
            0x28 => Self::OpenParen,
            0x29 => Self::CloseParen,
            0x2a => Self::Asterisk,
            0x2b => Self::Plus,
            0x2c => Self::Comma,
            0x2d => Self::Minus,
            0x2e => Self::Dot,
            0x2f => Self::Slash,
            0x30 => Self::D0,
            0x31 => Self::D1,
            0x32 => Self::D2,
            0x33 => Self::D3,
            0x34 => Self::D4,
            0x35 => Self::D5,
            0x36 => Self::D6,
            0x37 => Self::D7,
            0x38 => Self::D8,
            0x39 => Self::D9,
            0x3a => Self::Colon,
            0x3b => Self::Semicolon,
            0x3c => Self::LessThan,
            0x3d => Self::Equal,
            0x3e => Self::GreaterThan,
            0x3f => Self::Question,
            0x40 => Self::At,
            0x41 => Self::A,
            0x42 => Self::B,
            0x43 => Self::C,
            0x44 => Self::D,
            0x45 => Self::E,
            0x46 => Self::F,
            0x47 => Self::G,
            0x48 => Self::H,
            0x49 => Self::I,
            0x4a => Self::J,
            0x4b => Self::K,
            0x4c => Self::L,
            0x4d => Self::M,
            0x4e => Self::N,
            0x4f => Self::O,
            0x50 => Self::P,
            0x51 => Self::Q,
            0x52 => Self::R,
            0x53 => Self::S,
            0x54 => Self::T,
            0x55 => Self::U,
            0x56 => Self::V,
            0x57 => Self::W,
            0x58 => Self::X,
            0x59 => Self::Y,
            0x5a => Self::Z,
            0x5b => Self::OpenBracket,
            0x5c => Self::Backslash,
            0x5d => Self::CloseBracket,
            0x5e => Self::Caret,
            0x5f => Self::Underscore,
            0x60 => Self::Backtick,
            0x61 => Self::LowerA,
            0x62 => Self::LowerB,
            0x63 => Self::LowerC,
            0x64 => Self::LowerD,
            0x65 => Self::LowerE,
            0x66 => Self::LowerF,
            0x67 => Self::LowerG,
            0x68 => Self::LowerH,
            0x69 => Self::LowerI,
            0x6a => Self::LowerJ,
            0x6b => Self::LowerK,
            0x6c => Self::LowerL,
            0x6d => Self::LowerM,
            0x6e => Self::LowerN,
            0x6f => Self::LowerO,
            0x70 => Self::LowerP,
            0x71 => Self::LowerQ,
            0x72 => Self::LowerR,
            0x73 => Self::LowerS,
            0x74 => Self::LowerT,
            0x75 => Self::LowerU,
            0x76 => Self::LowerV,
            0x77 => Self::LowerW,
            0x78 => Self::LowerX,
            0x79 => Self::LowerY,
            0x7a => Self::LowerZ,
            0x7b => Self::OpenBrace,
            0x7c => Self::Bar,
            0x7d => Self::CloseBrace,
            0x7e => Self::Tilde,
            _ => return None,
        })
    }

    pub fn options() -> Vec<Self> {
        vec![
            Self::Space,
            Self::Exclamation,
            Self::DoubleQuote,
            Self::Octothorpe,
            Self::Dollar,
            Self::Percent,
            Self::Ampersand,
            Self::SingleQuote,
            Self::OpenParen,
            Self::CloseParen,
            Self::Asterisk,
            Self::Plus,
            Self::Comma,
            Self::Minus,
            Self::Dot,
            Self::Slash,
            Self::D0,
            Self::D1,
            Self::D2,
            Self::D3,
            Self::D4,
            Self::D5,
            Self::D6,
            Self::D7,
            Self::D8,
            Self::D9,
            Self::Colon,
            Self::Semicolon,
            Self::LessThan,
            Self::Equal,
            Self::GreaterThan,
            Self::Question,
            Self::At,
            Self::A,
            Self::B,
            Self::C,
            Self::D,
            Self::E,
            Self::F,
            Self::G,
            Self::H,
            Self::I,
            Self::J,
            Self::K,
            Self::L,
            Self::M,
            Self::N,
            Self::O,
            Self::P,
            Self::Q,
            Self::R,
            Self::S,
            Self::T,
            Self::U,
            Self::V,
            Self::W,
            Self::X,
            Self::Y,
            Self::Z,
            Self::OpenBracket,
            Self::Backslash,
            Self::CloseBracket,
            Self::Caret,
            Self::Underscore,
            Self::Backtick,
            Self::LowerA,
            Self::LowerB,
            Self::LowerC,
            Self::LowerD,
            Self::LowerE,
            Self::LowerF,
            Self::LowerG,
            Self::LowerH,
            Self::LowerI,
            Self::LowerJ,
            Self::LowerK,
            Self::LowerL,
            Self::LowerM,
            Self::LowerN,
            Self::LowerO,
            Self::LowerP,
            Self::LowerQ,
            Self::LowerR,
            Self::LowerS,
            Self::LowerT,
            Self::LowerU,
            Self::LowerV,
            Self::LowerW,
            Self::LowerX,
            Self::LowerY,
            Self::LowerZ,
            Self::OpenBrace,
            Self::Bar,
            Self::CloseBrace,
            Self::Tilde,
        ]
    }
}

impl fmt::Display for Character {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_char(match self {
            Self::Space => ' ',
            Self::Exclamation => '!',
            Self::DoubleQuote => '"',
            Self::Octothorpe => '#',
            Self::Dollar => '$',
            Self::Percent => '%',
            Self::Ampersand => '&',
            Self::SingleQuote => '\'',
            Self::OpenParen => '(',
            Self::CloseParen => ')',
            Self::Asterisk => '*',
            Self::Plus => '+',
            Self::Comma => ',',
            Self::Minus => '-',
            Self::Dot => '.',
            Self::Slash => '/',
            Self::D0 => '0',
            Self::D1 => '1',
            Self::D2 => '2',
            Self::D3 => '3',
            Self::D4 => '4',
            Self::D5 => '5',
            Self::D6 => '6',
            Self::D7 => '7',
            Self::D8 => '8',
            Self::D9 => '9',
            Self::Colon => ':',
            Self::Semicolon => ';',
            Self::LessThan => '<',
            Self::Equal => '=',
            Self::GreaterThan => '>',
            Self::Question => '?',
            Self::At => '@',
            Self::A => 'A',
            Self::B => 'B',
            Self::C => 'C',
            Self::D => 'D',
            Self::E => 'E',
            Self::F => 'F',
            Self::G => 'G',
            Self::H => 'H',
            Self::I => 'I',
            Self::J => 'J',
            Self::K => 'K',
            Self::L => 'L',
            Self::M => 'M',
            Self::N => 'N',
            Self::O => 'O',
            Self::P => 'P',
            Self::Q => 'Q',
            Self::R => 'R',
            Self::S => 'S',
            Self::T => 'T',
            Self::U => 'U',
            Self::V => 'V',
            Self::W => 'W',
            Self::X => 'X',
            Self::Y => 'Y',
            Self::Z => 'Z',
            Self::OpenBracket => '[',
            Self::Backslash => '\\',
            Self::CloseBracket => ']',
            Self::Caret => '^',
            Self::Underscore => '_',
            Self::Backtick => '`',
            Self::LowerA => 'a',
            Self::LowerB => 'b',
            Self::LowerC => 'c',
            Self::LowerD => 'd',
            Self::LowerE => 'e',
            Self::LowerF => 'f',
            Self::LowerG => 'g',
            Self::LowerH => 'h',
            Self::LowerI => 'i',
            Self::LowerJ => 'j',
            Self::LowerK => 'k',
            Self::LowerL => 'l',
            Self::LowerM => 'm',
            Self::LowerN => 'n',
            Self::LowerO => 'o',
            Self::LowerP => 'p',
            Self::LowerQ => 'q',
            Self::LowerR => 'r',
            Self::LowerS => 's',
            Self::LowerT => 't',
            Self::LowerU => 'u',
            Self::LowerV => 'v',
            Self::LowerW => 'w',
            Self::LowerX => 'x',
            Self::LowerY => 'y',
            Self::LowerZ => 'z',
            Self::OpenBrace => '{',
            Self::Bar => '|',
            Self::CloseBrace => '}',
            Self::Tilde => '~',
        })
    }
}
